{"version":3,"sources":["./src/app/Services/WorkoutService/workout.service.ts"],"names":[],"mappings":"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","file":"default-src_app_Services_WorkoutService_workout_service_ts.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Workout} from \"../../Models/workout\";\nimport {Exercise} from \"../../Models/exercise\";\nimport {UserService} from \"../UserService/user.service\";\nimport {environment} from \"../../../environments/environment\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class WorkoutService {\n\n  private apiURL = environment.apiURL;\n\n  constructor(private http: HttpClient,\n              private user: UserService) {\n  }\n\n  /** This function attempts to submit a workout by using the following parameters:\n   *\n   * @author Luca Azmanov, u19004185\n   * @param workout represents a Workout Object that will hold the necessary data for creating a workout.\n   *\n   * @return Number represents the status of the Http request.\n   *\n   * @returns 200,400,500 represent a success, User error and server error, respectively.\n   */\n  async attemptSubmitWorkout(workout: Workout, exercises, loop, genre, width, height): Promise<number> {\n      const url = this.apiURL+\"/workout/createWorkout\";\n\n      const body = {\n          workoutTitle: workout.title,\n          workoutDescription: workout.description,\n          exercises:exercises,\n          loop: loop,\n          songChoice: genre,\n          resolutionWidth: width,\n          resolutionHeight: height\n      };\n      return this.http.post(url, body ).toPromise().then(()=>200).catch(error=>{\n          if(error.status===0) {\n              return 500;\n          }\n          return error.status;\n      });\n  }\n\n  /** This function attempts to update a workout by using the following parameters:\n   *\n   * @author Luca Azmanov, u19004185\n   * @param workout represents a Workout Object that will hold the necessary data for creating a workout.\n   * @param id the id corresponding to the workout\n   *\n   * @return Number represents the status of the Http request.\n   *\n   * @returns 200,400,500 represent a success, User error and server error, respectively.\n   */\n  async attemptUpdateWorkout(workout: Workout, id: string, exercises, loop, genre, width, height): Promise<number> {\n      const url = this.apiURL+\"/workout/updateWorkout\";\n\n      const body = {\n          workoutID:id,\n          workoutTitle: workout.title,\n          workoutDescription: workout.description,\n          exercises:exercises,\n          loop: loop,\n          songChoice: genre,\n          resolutionWidth: width,\n          resolutionHeight: height\n      };\n      return this.http.put(url, body ).toPromise().then(()=>200).catch(error=>{\n          if(error.status===0) {\n              return 500;\n          }\n          return error.status;\n      });\n  }\n\n  /** This function attempts to remove a workout by using the following parameters:\n   *\n   * @author Luca Azmanov, u19004185\n   * @param id the id corresponding to the workout\n   *\n   * @return Number represents the status of the Http request.\n   *\n   * @returns 200,400,500 represent a success, User error and server error, respectively.\n   */\n  async attemptRemoveWorkout(id: string): Promise<number> {\n      const url = this.apiURL+\"/workout/deleteWorkout\";\n      const body = {\n          workoutID:id,\n      };\n\n      return this.http.request(\"delete\", url, {body}).toPromise().then(()=>200).catch(error=>{\n          if(error.status===0) {\n              return 500;\n          }\n          return error.status;\n      });\n  }\n\n  /** This function attempts to submit an exercise by using the following parameters:\n   *\n   * @author Luca Azmanov, u19004185\n   * @param exercise represents an Exercise Object that will hold the necessary data for creating an exercise.\n   *\n   * @return Number represents the status of the Http request.\n   *\n   * @returns 200,400,500 represent a success, User error and server error, respectively.\n   */\n  async attemptSubmitExercise(exercise: Exercise): Promise<number> {\n      const url = this.apiURL+\"/workout/createExercise\";\n      const body = {\n          exerciseTitle: exercise.title,\n          exerciseDescription: exercise.description,\n          repRange: exercise.repRange,\n          sets: exercise.sets,\n          poseDescription: exercise.poseDescription,\n          restPeriod: exercise.restPeriod,\n          tags: exercise.tags,\n          duration: exercise.duratime,\n          images: exercise.images\n      };\n      return this.http.post(url, body).toPromise().then(()=>200).catch(error=>{\n          if(error.status===0) {\n              return 500;\n          }\n          return error.status;\n      });\n  }\n\n  /** This function attempts to update an exercise by using the following parameters:\n   *\n   * @author Luca Azmanov, u19004185\n   * @param exercise represents an Exercise Object that will hold the necessary data for creating an exercise.\n   * @param id the id corresponding to the exercise\n   * @return Number represents the status of the Http request.\n   *\n   * @returns 200,400,500 represent a success, User error and server error, respectively.\n   */\n  async attemptUpdateExercise(exercise: Exercise, id: string): Promise<number> {\n      const url = this.apiURL+\"/workout/updateExercise\";\n\n      const body = {\n          exerciseID:id,\n          exerciseTitle: exercise.title,\n          exerciseDescription: exercise.description,\n          repRange: exercise.repRange,\n          sets: exercise.sets,\n          poseDescription: exercise.poseDescription,\n          restPeriod: exercise.restPeriod,\n          tags: exercise.tags,\n          duration: exercise.duratime,\n          images: exercise.images\n      };\n\n      return this.http.put(url, body).toPromise().then(()=>200).catch(error=>{\n          if(error.status===0) {\n              return 500;\n          }\n          return error.status;\n      });\n  }\n\n  /** This function attempts to submit an exercise by using the following parameters:\n   *\n   * @author Luca Azmanov, u19004185\n   * @param id the id corresponding to the exercise\n   * @return Number represents the status of the Http request.\n   *\n   * @returns 200,400,500 represent a success, User error and server error, respectively.\n   */\n  async attemptRemoveExercise(id: string): Promise<number> {\n      const url = this.apiURL+\"/workout/deleteExercise\";\n\n      const body = {\n          exerciseID:id,\n      };\n\n      return this.http.request(\"delete\", url, {body}).toPromise().then(()=>200).catch(error=>{\n          if(error.status===0) {\n              return 500;\n          }\n          return error.status;\n      });\n  }\n\n  /**\n   * This function attempts to obtain all the workouts in the database from the endpoint provided.\n   *\n   * @returns 200,400,500 represent a success, User error and server error, respectively.\n   * @author Jia Hui Wang, u18080449\n   */\n  async attemptGetWorkouts(): Promise<any>{\n      const url = this.apiURL+\"/workout/getWorkouts\";\n      return this.http.get(url).toPromise().then(data=>{\n          data = {\n              status: 200,\n              data: data\n          };\n          return data;\n      }).catch(err=>err);\n  }\n\n  /**\n   * This function attempts to obtain all the exercises in the database from the endpoint provided.\n   *\n   * @returns 200,404,500 represent a success, not found error and server error, respectively.\n   * @author Jia Hui Wang, u18080449\n   */\n  async attemptGetExercises(): Promise<any>{\n      const url = this.apiURL+\"/workout/getExercises\";\n      return this.http.get(url).toPromise().then(data=>{\n          data = {\n              status: 200,\n              data: data\n          };\n          return data;\n      }).catch(err=>err);\n  }\n\n  /**\n   * This function attempts to obtain all the workouts in the database for a specific planner from the endpoint provided.\n   *\n   * @returns 200,404,500 represent a success, not found error and server error, respectively.\n   * @author Jia Hui Wang, u18080449\n   */\n  async attemptGetWorkoutsByPlanner(): Promise<any>{\n      const url = this.apiURL+\"/workout/getWorkoutByPlanner\";\n\n      return this.http.get(url).toPromise().then(data=>{\n          data = {\n              status: 200,\n              data: data\n          };\n          return data;\n      }).catch(error=>{\n          if(error.status===0 || error.status === 500) {\n              return 500;\n          }\n          return 404;\n      });\n  }\n\n  /**\n   * This function attempts to obtain all the exercises in the database for a specific planner from the endpoint provided.\n   *\n   * @returns 200,404,500 represent a success, not found error and server error, respectively.\n   * @author Jia Hui Wang, u18080449\n   */\n  async attemptGetExercisesByPlanner(): Promise<any>{\n      const url = this.apiURL+\"/workout/getExercisesByPlanner\";\n\n      return this.http.get(url).toPromise().then(data=>{\n          data = {\n              status: 200,\n              data: data\n          };\n          return data;\n      }).catch(error=>{\n          if(error.status===0 || error.status === 500) {\n              return 500;\n          }\n          return 404;\n      });\n  }\n\n  /**\n   * This function attempts to obtain the PDF of a specific workout based on the ID passed in from the endpoint provided.\n   *\n   * @param id unique ID of the workout\n   * @returns 200,404,500 represent a success, not found error and server error, respectively.\n   * @author Jia Hui Wang, u18080449\n   */\n  async attemptGetPDF(id: string): Promise<any>{\n      const url = this.apiURL+\"/workout/getWorkoutPDF/\"+id;\n      return await this.http.get(url).toPromise().then(data=>{\n          data = {\n              status: 200,\n              data: data\n          };\n          return data;\n      }).catch(error=>{\n          if(error.status >=200 && error.status<300){\n              error = {\n                  status: 200,\n                  data: error.error.text\n              };\n              return error;\n          } else if(error.status===0 || error.status === 500) {\n              return 500;\n          }else {\n              return 404;\n          }\n      });\n  }\n\n  /**\n   * This function attempts to obtain the video of a specific workout based on the ID passed in from the endpoint provided.\n   *\n   * @param id unique ID of the workout\n   * @returns 200,404,500 represent a success, not found error and server error, respectively.\n   * @author Jia Hui Wang, u18080449\n   */\n  async attemptGetVideo(id: string): Promise<any>{\n      const url = this.apiURL+\"/workout/getWorkoutVideo/\"+id;\n      return await this.http.get(url).toPromise().then(data=>{\n          data = {\n              status: 200,\n              data: data\n          };\n          return data;\n      }).catch(error=>{\n          if(error.status >=200 && error.status<300){\n              error = {\n                  status: 200,\n                  data: error.error.text\n              };\n              return error;\n          } else if(error.status===0 || error.status === 500) {\n              return 500;\n          }else if(error.status===400) {\n              return 400;\n          }else {\n              return 404;\n          }\n      });\n  }\n\n  async getTags(): Promise<any>{\n      const url = this.apiURL+\"/workout/getTags\";\n\n      return this.http.get(url).toPromise().then(data=>{\n          data = {\n              status: 200,\n              data: data\n          };\n          return data;\n      }).catch(error=>{\n          if(error.status===0 || error.status === 500) {\n              return 500;\n          }\n          return 404;\n      });\n  }\n}\n"],"sourceRoot":"webpack:///"}